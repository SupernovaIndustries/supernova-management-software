<?php

namespace App\Console\Commands;

use App\Models\Project;
use App\Services\AiServiceFactory;
use Illuminate\Console\Command;

class TestAiMilestoneGeneration extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'ai:test-milestone-generation {project_id? : The project ID to test}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Test AI milestone generation for a project';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $this->info('🤖 AI Milestone Generation Test');
        $this->newLine();

        // Get AI service
        $aiService = AiServiceFactory::make();

        if (!$aiService->isConfigured()) {
            $this->error('❌ AI service is not configured!');
            $this->warn('Configure Claude API key in Company Profile or install Ollama for local AI.');
            return 1;
        }

        $this->info('✅ AI service is configured');
        $this->newLine();

        // Get project ID
        $projectId = $this->argument('project_id');

        if (!$projectId) {
            // Show list of projects
            $projects = Project::with('customer')
                ->latest()
                ->limit(10)
                ->get();

            if ($projects->isEmpty()) {
                $this->error('No projects found in database.');
                return 1;
            }

            $this->info('Recent projects:');
            $this->table(
                ['ID', 'Code', 'Name', 'Customer'],
                $projects->map(fn($p) => [
                    $p->id,
                    $p->code,
                    $p->name,
                    $p->customer?->company_name ?? 'N/A'
                ])
            );

            $projectId = $this->ask('Enter project ID to test');
        }

        // Load project
        $project = Project::with('customer')->find($projectId);

        if (!$project) {
            $this->error("Project with ID {$projectId} not found.");
            return 1;
        }

        $this->info("Testing milestone generation for project: {$project->name}");
        $this->info("Customer: " . ($project->customer?->company_name ?? 'N/A'));
        $this->newLine();

        if (empty($project->description)) {
            $this->warn('⚠️ Project has no description. Milestones may not be accurate.');
            $this->newLine();
        } else {
            $this->info('Project description:');
            $this->line($project->description);
            $this->newLine();
        }

        // Confirm generation
        if (!$this->confirm('Generate milestones for this project?', true)) {
            $this->info('Aborted.');
            return 0;
        }

        // Generate milestones
        $this->info('Generating milestones with AI...');
        $bar = $this->output->createProgressBar(3);
        $bar->start();

        try {
            $context = [
                'customer' => $project->customer?->company_name,
                'budget' => $project->budget,
                'due_date' => $project->due_date,
            ];

            $bar->advance();

            $milestones = $aiService->generateProjectMilestones(
                $project->name,
                $project->description ?: 'Generic electronics project',
                $context
            );

            $bar->advance();

            if (empty($milestones)) {
                $bar->finish();
                $this->newLine(2);
                $this->error('❌ No milestones generated by AI.');
                return 1;
            }

            $bar->finish();
            $this->newLine(2);

            $this->info("✅ Generated {count($milestones)} milestones:");
            $this->newLine();

            // Display generated milestones
            $this->table(
                ['#', 'Name', 'Category', 'Days Offset', 'Description'],
                array_map(fn($m, $i) => [
                    $i + 1,
                    $m['name'],
                    $m['category'],
                    $m['deadline_offset_days'],
                    substr($m['description'], 0, 60) . '...'
                ], $milestones, array_keys($milestones))
            );

            // Ask to create milestones
            if ($this->confirm('Create these milestones and attach to project?', false)) {
                $startDate = $project->start_date
                    ? \Carbon\Carbon::parse($project->start_date)
                    : now();

                $createdCount = 0;
                foreach ($milestones as $milestoneData) {
                    $milestone = \App\Models\Milestone::create([
                        'name' => $milestoneData['name'],
                        'description' => $milestoneData['description'],
                        'category' => $milestoneData['category'],
                        'color' => $this->getCategoryColor($milestoneData['category']),
                        'is_active' => true,
                        'sort_order' => $milestoneData['sort_order'],
                    ]);

                    $targetDate = $startDate->copy()->addDays($milestoneData['deadline_offset_days']);

                    $project->milestones()->attach($milestone->id, [
                        'target_date' => $targetDate,
                        'sort_order' => $milestoneData['sort_order'],
                        'is_completed' => false,
                    ]);

                    $createdCount++;
                }

                $this->newLine();
                $this->info("✅ Created and attached {$createdCount} milestones to project!");
            } else {
                $this->info('Milestones not created (dry run only).');
            }

            return 0;

        } catch (\Exception $e) {
            $this->newLine(2);
            $this->error('❌ Error: ' . $e->getMessage());
            $this->error('Trace: ' . $e->getTraceAsString());
            return 1;
        }
    }

    /**
     * Get color for milestone category.
     */
    private function getCategoryColor(string $category): string
    {
        return match ($category) {
            'design' => 'blue',
            'prototyping' => 'purple',
            'testing' => 'yellow',
            'production' => 'orange',
            'delivery' => 'green',
            'documentation' => 'gray',
            default => 'blue',
        };
    }
}
