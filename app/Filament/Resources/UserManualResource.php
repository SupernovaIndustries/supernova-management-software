<?php

namespace App\Filament\Resources;

use App\Filament\Resources\UserManualResource\Pages;
use App\Models\UserManual;
use App\Services\UserManualGeneratorService;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Forms\Get;
use Filament\Forms\Set;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Filament\Notifications\Notification;
use Illuminate\Support\Facades\Storage;

class UserManualResource extends Resource
{
    protected static ?string $model = UserManual::class;

    protected static ?string $navigationIcon = 'heroicon-o-document-text';
    
    protected static ?string $navigationLabel = 'User Manuals';
    
    protected static ?string $navigationGroup = 'Documentation';

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\Section::make('Basic Information')
                    ->schema([
                        Forms\Components\Select::make('project_id')
                            ->relationship('project', 'name')
                            ->searchable()
                            ->preload()
                            ->required()
                            ->label('Project')
                            ->reactive()
                            ->afterStateUpdated(function (Set $set, Get $get, $state) {
                                if ($state) {
                                    $project = \App\Models\Project::find($state);
                                    if ($project && !$get('title')) {
                                        $type = $get('type') ?? 'operation';
                                        $typeNames = UserManual::getTypeOptions();
                                        $typeName = $typeNames[$type] ?? ucfirst($type);
                                        $set('title', "{$project->name} - {$typeName}");
                                    }
                                }
                            }),
                            
                        Forms\Components\TextInput::make('title')
                            ->required()
                            ->maxLength(255)
                            ->label('Manual Title'),
                            
                        Forms\Components\TextInput::make('version')
                            ->required()
                            ->maxLength(255)
                            ->default('1.0')
                            ->label('Version'),
                            
                        Forms\Components\Select::make('type')
                            ->required()
                            ->options(UserManual::getTypeOptions())
                            ->default('operation')
                            ->reactive()
                            ->afterStateUpdated(function (Set $set, Get $get, $state) {
                                $projectId = $get('project_id');
                                if ($projectId && $state) {
                                    $project = \App\Models\Project::find($projectId);
                                    if ($project) {
                                        $typeNames = UserManual::getTypeOptions();
                                        $typeName = $typeNames[$state] ?? ucfirst($state);
                                        $set('title', "{$project->name} - {$typeName}");
                                    }
                                }
                            }),
                            
                        Forms\Components\Select::make('format')
                            ->required()
                            ->options(UserManual::getFormatOptions())
                            ->default('pdf'),
                            
                        Forms\Components\Select::make('generated_by')
                            ->relationship('generatedBy', 'name')
                            ->default(fn () => auth()->id())
                            ->required()
                            ->label('Generated By'),
                    ])
                    ->columns(2),
                    
                Forms\Components\Section::make('Generation Configuration')
                    ->schema([
                        Forms\Components\Textarea::make('generation_prompt')
                            ->label('Custom Generation Prompt')
                            ->rows(4)
                            ->helperText('Leave empty to use default prompt based on manual type')
                            ->columnSpanFull(),
                            
                        Forms\Components\KeyValue::make('generation_config')
                            ->label('Generation Configuration')
                            ->keyLabel('Setting')
                            ->valueLabel('Value')
                            ->helperText('Custom settings for AI generation (e.g., detail_level: high)')
                            ->columnSpanFull(),
                            
                        Forms\Components\Toggle::make('auto_update')
                            ->label('Auto-Update')
                            ->helperText('Automatically regenerate when project changes')
                            ->default(false),
                    ])
                    ->collapsible()
                    ->collapsed(),
                    
                Forms\Components\Section::make('Status & Content')
                    ->schema([
                        Forms\Components\Select::make('status')
                            ->required()
                            ->options(UserManual::getStatusOptions())
                            ->default('draft')
                            ->disabled()
                            ->helperText('Status is managed automatically during generation'),
                            
                        Forms\Components\Textarea::make('content')
                            ->label('Generated Content')
                            ->rows(6)
                            ->disabled()
                            ->columnSpanFull()
                            ->visible(fn ($record) => $record && $record->content),
                            
                        Forms\Components\TextInput::make('file_path')
                            ->label('Generated File Path')
                            ->disabled()
                            ->helperText('Path to the generated file')
                            ->visible(fn ($record) => $record && $record->file_path),
                            
                        Forms\Components\Textarea::make('error_message')
                            ->label('Error Message')
                            ->rows(3)
                            ->disabled()
                            ->visible(fn ($record) => $record && $record->error_message)
                            ->columnSpanFull(),
                            
                        Forms\Components\Placeholder::make('file_info')
                            ->label('File Information')
                            ->content(fn ($record) => $record && $record->isDownloadable() 
                                ? "Size: {$record->file_size} | Generated: {$record->generated_at?->format('d/m/Y H:i')}"
                                : 'No file generated yet')
                            ->visible(fn ($record) => $record?->exists),
                    ])
                    ->visible(fn ($record) => $record?->exists),
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->defaultSort('created_at', 'desc')
            ->columns([
                Tables\Columns\TextColumn::make('project.name')
                    ->label('Project')
                    ->searchable()
                    ->sortable()
                    ->limit(30),
                    
                Tables\Columns\TextColumn::make('title')
                    ->searchable()
                    ->sortable()
                    ->limit(40),
                    
                Tables\Columns\TextColumn::make('type')
                    ->badge()
                    ->color(fn (string $state): string => match ($state) {
                        'installation' => 'info',
                        'operation' => 'success',
                        'maintenance' => 'warning',
                        'troubleshooting' => 'danger',
                        'complete' => 'primary',
                        default => 'gray',
                    }),
                    
                Tables\Columns\TextColumn::make('format')
                    ->badge()
                    ->color('gray'),
                    
                Tables\Columns\TextColumn::make('version')
                    ->sortable(),
                    
                Tables\Columns\TextColumn::make('status')
                    ->badge()
                    ->color(fn (string $state): string => match ($state) {
                        'draft' => 'gray',
                        'generating' => 'warning',
                        'completed' => 'success',
                        'failed' => 'danger',
                        default => 'gray',
                    }),
                    
                Tables\Columns\TextColumn::make('generatedBy.name')
                    ->label('Generated By')
                    ->searchable()
                    ->sortable()
                    ->toggleable(),
                    
                Tables\Columns\TextColumn::make('generated_at')
                    ->label('Generated')
                    ->dateTime()
                    ->sortable()
                    ->placeholder('Not generated'),
                    
                Tables\Columns\IconColumn::make('auto_update')
                    ->label('Auto-Update')
                    ->boolean()
                    ->toggleable(),
                    
                Tables\Columns\TextColumn::make('created_at')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
                    
                Tables\Columns\TextColumn::make('updated_at')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
            ])
            ->filters([
                Tables\Filters\SelectFilter::make('type')
                    ->options(UserManual::getTypeOptions()),
                    
                Tables\Filters\SelectFilter::make('status')
                    ->options(UserManual::getStatusOptions()),
                    
                Tables\Filters\SelectFilter::make('format')
                    ->options(UserManual::getFormatOptions()),
                    
                Tables\Filters\SelectFilter::make('project')
                    ->relationship('project', 'name')
                    ->searchable()
                    ->preload(),
            ])
            ->actions([
                Tables\Actions\Action::make('generate')
                    ->label('Generate')
                    ->icon('heroicon-o-cog-6-tooth')
                    ->color('primary')
                    ->visible(fn (UserManual $record) => in_array($record->status, ['draft', 'failed']))
                    ->action(function (UserManual $record, UserManualGeneratorService $generator) {
                        try {
                            $generator->generateManual($record->project, [
                                'type' => $record->type,
                                'format' => $record->format,
                                'version' => $record->version,
                                'custom_config' => $record->generation_config ?? [],
                            ]);
                            
                            Notification::make()
                                ->title('Manual Generation Started')
                                ->body('The manual is being generated. Please refresh to see the progress.')
                                ->success()
                                ->send();
                                
                        } catch (\Exception $e) {
                            Notification::make()
                                ->title('Generation Failed')
                                ->body('Error: ' . $e->getMessage())
                                ->danger()
                                ->send();
                        }
                    }),
                    
                Tables\Actions\Action::make('download')
                    ->label('Download')
                    ->icon('heroicon-o-arrow-down-tray')
                    ->color('success')
                    ->visible(fn (UserManual $record) => $record->isDownloadable())
                    ->url(fn (UserManual $record) => $record->getDownloadUrl())
                    ->openUrlInNewTab(),
                    
                Tables\Actions\Action::make('regenerate')
                    ->label('Regenerate')
                    ->icon('heroicon-o-arrow-path')
                    ->color('warning')
                    ->visible(fn (UserManual $record) => $record->status === 'completed')
                    ->requiresConfirmation()
                    ->action(function (UserManual $record, UserManualGeneratorService $generator) {
                        try {
                            // Delete old file if exists
                            if ($record->file_path && Storage::exists($record->file_path)) {
                                Storage::delete($record->file_path);
                            }
                            
                            $record->update(['status' => 'draft']);
                            
                            $generator->generateManual($record->project, [
                                'type' => $record->type,
                                'format' => $record->format,
                                'version' => $record->version,
                                'custom_config' => $record->generation_config ?? [],
                            ]);
                            
                            Notification::make()
                                ->title('Manual Regeneration Started')
                                ->body('The manual is being regenerated.')
                                ->success()
                                ->send();
                                
                        } catch (\Exception $e) {
                            Notification::make()
                                ->title('Regeneration Failed')
                                ->body('Error: ' . $e->getMessage())
                                ->danger()
                                ->send();
                        }
                    }),
                    
                Tables\Actions\EditAction::make(),
                
                Tables\Actions\DeleteAction::make()
                    ->before(function (UserManual $record) {
                        // Delete associated file when manual is deleted
                        if ($record->file_path && Storage::exists($record->file_path)) {
                            Storage::delete($record->file_path);
                        }
                    }),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make()
                        ->before(function ($records) {
                            // Delete associated files when manuals are bulk deleted
                            foreach ($records as $record) {
                                if ($record->file_path && Storage::exists($record->file_path)) {
                                    Storage::delete($record->file_path);
                                }
                            }
                        }),
                ]),
            ])
            ->emptyStateHeading('No User Manuals')
            ->emptyStateDescription('Create your first user manual to get started.')
            ->emptyStateActions([
                Tables\Actions\CreateAction::make()
                    ->label('Create User Manual'),
            ]);
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListUserManuals::route('/'),
            'create' => Pages\CreateUserManual::route('/create'),
            'edit' => Pages\EditUserManual::route('/{record}/edit'),
        ];
    }
    
    public static function getNavigationBadge(): ?string
    {
        return static::getModel()::where('status', 'completed')->count();
    }
}