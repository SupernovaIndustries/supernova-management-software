<?php

namespace App\Jobs;

use App\Models\Project;
use App\Models\Milestone;
use App\Services\AiServiceFactory;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Foundation\Queue\Queueable;
use Illuminate\Support\Facades\Log;
use Carbon\Carbon;

class GenerateProjectMilestones implements ShouldQueue
{
    use Queueable;

    /**
     * The project instance.
     */
    public Project $project;

    /**
     * Number of times to retry the job.
     */
    public int $tries = 3;

    /**
     * Timeout for job execution (seconds).
     */
    public int $timeout = 120;

    /**
     * Create a new job instance.
     */
    public function __construct(Project $project)
    {
        $this->project = $project;
    }

    /**
     * Execute the job.
     */
    public function handle(): void
    {
        Log::info('GenerateProjectMilestones job started', [
            'project_id' => $this->project->id,
            'project_code' => $this->project->code,
        ]);

        // Get AI service
        $aiService = AiServiceFactory::make();

        if (!$aiService->isConfigured()) {
            Log::warning('AI service not configured, skipping milestone generation', [
                'project_id' => $this->project->id,
            ]);
            return;
        }

        // Check if project has description
        if (empty($this->project->description)) {
            Log::warning('Project has no description, skipping milestone generation', [
                'project_id' => $this->project->id,
            ]);
            return;
        }

        try {
            // Prepare context
            $context = [
                'customer' => $this->project->customer?->company_name,
                'budget' => $this->project->budget,
                'due_date' => $this->project->due_date,
            ];

            // Generate milestones
            $milestones = $aiService->generateProjectMilestones(
                $this->project->name,
                $this->project->description,
                $context
            );

            if (empty($milestones)) {
                Log::warning('No milestones generated by AI', [
                    'project_id' => $this->project->id,
                ]);
                return;
            }

            // Calculate start date for offset calculation
            $startDate = $this->project->start_date
                ? Carbon::parse($this->project->start_date)
                : now();

            // Create milestones and attach to project
            // Apply 1.5x multiplier for relaxed deadlines
            $createdCount = 0;
            foreach ($milestones as $milestoneData) {
                $milestone = Milestone::create([
                    'name' => $milestoneData['name'],
                    'description' => $milestoneData['description'],
                    'category' => $milestoneData['category'],
                    'color' => $this->getCategoryColor($milestoneData['category']),
                    'is_active' => true,
                    'sort_order' => $milestoneData['sort_order'],
                ]);

                // Apply 1.5x multiplier for relaxed deadlines (more breathing room)
                $relaxedOffsetDays = (int) round($milestoneData['deadline_offset_days'] * 1.5);

                // Attach to project with calculated target date
                $targetDate = $startDate->copy()->addDays($relaxedOffsetDays);

                $this->project->milestones()->attach($milestone->id, [
                    'target_date' => $targetDate,
                    'sort_order' => $milestoneData['sort_order'],
                    'is_completed' => false,
                ]);

                $createdCount++;

                Log::debug('Milestone attached with relaxed deadline', [
                    'milestone' => $milestoneData['name'],
                    'original_offset' => $milestoneData['deadline_offset_days'],
                    'relaxed_offset' => $relaxedOffsetDays,
                    'target_date' => $targetDate->format('Y-m-d'),
                ]);
            }

            Log::info('Milestones generated successfully', [
                'project_id' => $this->project->id,
                'milestones_created' => $createdCount,
            ]);

        } catch (\Exception $e) {
            Log::error('Failed to generate milestones in job', [
                'project_id' => $this->project->id,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString(),
            ]);

            throw $e; // Re-throw to trigger retry mechanism
        }
    }

    /**
     * Get color for milestone category.
     */
    private function getCategoryColor(string $category): string
    {
        return match ($category) {
            'design' => 'blue',
            'prototyping' => 'purple',
            'testing' => 'yellow',
            'production' => 'orange',
            'delivery' => 'green',
            'documentation' => 'gray',
            default => 'blue',
        };
    }

    /**
     * Handle job failure.
     */
    public function failed(\Throwable $exception): void
    {
        Log::error('GenerateProjectMilestones job failed', [
            'project_id' => $this->project->id,
            'error' => $exception->getMessage(),
        ]);
    }
}
